#include "level2.h"


__global__
void test_gemv_0()
{
  printf("========================================\n");
  float amat[3][2] {0}; arange(amat);
  float xvec[3] {0, 1, 1};
  float yvec[2] {0};

  const float alpha = 1.0f;
  const float beta = 1.0f;
  const bool trans = true;
  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");

  // Expected results
  float expected_yvec[2] {6, 8};
  printf("\n result = "); printr(yvec);
  assert_isclose(expected_yvec, yvec);
}

__global__ 
void test_gemv_1()
{
  printf("========================================\n");
  float amat[3][2] {0}; arange(amat);
  float xvec[2] {1, 1};
  float yvec[3] {0};

  const float alpha = 1.0f;
  const float beta = 1.0f;
  const bool trans = false;

  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");

  // Expected results
  float expected_yvec[3] {1, 5, 9};
  printf("\n result = "); printr(yvec);

  assert_isclose(expected_yvec, yvec);
}

void test_gemv422()
{
  // Define a small 4D matrix A (2x2x2x3), vector x (6), and vector y (4)
  const int dim1 = 2, dim2 = 2, dim3 = 2, dim4 = 3;
  const int flattened_rows = dim1 * dim2;
  const int flattened_cols = dim3 * dim4;
  float A[flattened_rows * flattened_cols] = {
      1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f,
      7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f,
      13.0f, 14.0f, 15.0f, 16.0f, 17.0f, 18.0f,
      19.0f, 20.0f, 21.0f, 22.0f, 23.0f, 24.0f};
  float x[flattened_cols] = {1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f};
  float y[flattened_rows] = {0.0f, 0.0f, 0.0f, 0.0f};

  // Call the __device__ gemv422 function directly
  gemv422(A, x, y, dim1, dim2, dim3, dim4);

  // Print the result
  printf("Result y: [%f, %f, %f, %f]\n", y[0], y[1], y[2], y[3]);

  // Expected results
  float expected_y[flattened_rows] = {21.0f, 57.0f, 93.0f, 129.0f};

  // Assert the results
  for (int i = 0; i < flattened_rows; ++i)
  {
    assert(fabs(y[i] - expected_y[i]) < 1e-5 && "Assertion failed for y[i]");
  }
}

__global__
void test_gemv312_0()
{
  printf("========================================\n");
  float amat[2][3][2] {0}; arange(amat);
  float xvec[2] {1, 1};
  float yvec[2][3] {0};
  const float alpha = 1.0f;
  const float beta = 1.0f;
  const bool trans = false;

  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv312(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");

  // Expected results
  float expected_yvec[2][3] {1, 5, 9, 13, 17, 21};
  printf("\n result = "); printr(yvec);

  assert_isclose(expected_yvec, yvec);
}

__global__
void test_gemv312_1()
{
  printf("==============test_gemv312_1=======================\n");
  float amat[2][1][3] {0}; arange(amat);
  float xvec[2] {0, 1};
  float yvec[1][3] {0};
  const float alpha = 1.0f;
  const float beta = 1.0f;
  const bool trans = true;

  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv312(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");

  // Expected results
  float expected_yvec[1][3] {3, 4, 5};
  printf("\n result = "); printr(yvec);

  assert_isclose(expected_yvec, yvec);
}

__global__
void test_gemv312_2()
{
  printf("========================================\n");
  float amat[3][9][9]   {  {    {   0.04846839,   -0.01319809,    0.00888869,   -0.00461266,   -0.00000000,   -0.00000255,   -0.00000567,   -0.04582563,    0.10322431},    {   0.01319809,    0.25033903,    0.28724288,   -0.00061147,   -0.00015417,   -0.06118460,    0.01184802,    0.00000020,    0.00000007},    {  -0.00888869,   -0.28724288,   -0.29827035,   -0.00000000,   -0.00000000,   -0.00000000,   -0.00030407,   -0.00190949,    0.00007478},    {   0.00461266,    0.00061147,    0.00000000,   -0.00076683,   -0.00599096,   -0.00000000,    0.00000000,    0.00000000,    0.00000000},    {   0.00000000,    0.00015417,    0.00000000,    0.00599096,    0.00614513,   -0.00000000,    0.00000000,    0.00000000,    0.00000000},    {   0.00000255,    0.06118460,    0.00000000,    0.00000000,    0.00000000,    0.06118715,    0.00000000,    0.00000000,    0.00000000},    {   0.00000567,   -0.01184802,    0.00030407,   -0.00000000,   -0.00000000,   -0.00000000,   -0.01153828,    0.00000000,    0.00000000},    {   0.04582563,   -0.00000020,    0.00190949,   -0.00000000,   -0.00000000,   -0.00000000,   -0.00000000,    0.04773492,    0.00000000},    {  -0.10322431,   -0.00000007,   -0.00007478,   -0.00000000,   -0.00000000,   -0.00000000,   -0.00000000,   -0.00000000,   -0.10329916}  },  {    {  -0.00989226,    0.00530896,   -0.04324786,    0.00731743,    0.00000000,    0.00000014,   -0.00000001,   -0.04842578,    0.06915485},    {  -0.00530896,   -0.44461188,   -0.40465906,    0.03913484,    0.00112959,   -0.02218241,   -0.05272570,   -0.00000019,    0.00000001},    {   0.04324786,    0.40465906,    0.45238862,    0.00000000,    0.00000000,    0.00000000,    0.00035841,    0.00384499,    0.00027829},    {  -0.00731743,   -0.03913484,   -0.00000000,   -0.03527131,    0.01118097,   -0.00000000,   -0.00000000,   -0.00000000,   -0.00000000},    {  -0.00000000,   -0.00112959,   -0.00000000,   -0.01118097,   -0.01231056,   -0.00000000,   -0.00000000,   -0.00000000,   -0.00000000},    {  -0.00000014,    0.02218241,   -0.00000000,    0.00000000,    0.00000000,    0.02218226,   -0.00000000,   -0.00000000,    0.00000000},    {   0.00000001,    0.05272570,   -0.00035841,    0.00000000,    0.00000000,    0.00000000,    0.05236730,   -0.00000000,    0.00000000},    {   0.04842578,    0.00000019,   -0.00384499,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.04458098,    0.00000000},    {  -0.06915485,   -0.00000001,   -0.00027829,    0.00000000,    0.00000000,   -0.00000000,   -0.00000000,   -0.00000000,   -0.06943315}  },  {    {  -0.11942402,    0.00894437,    0.01865741,    0.00367547,    0.00000000,    0.00000041,    0.00000983,   -0.15660350,    0.00589198},    {  -0.00894437,    0.06929022,   -0.01479849,    0.00432650,   -0.00040069,   -0.02813573,    0.11724347,   -0.00000044,   -0.00000002},    {  -0.01865741,    0.01479849,   -0.00891470,    0.00000000,   -0.00000000,   -0.00000000,    0.00024444,   -0.00522030,   -0.00007991},    {  -0.00367547,   -0.00432650,   -0.00000000,   -0.02915783,   -0.02115586,   -0.00000000,    0.00000000,   -0.00000000,   -0.00000000},    {  -0.00000000,    0.00040069,    0.00000000,    0.02115586,    0.02155655,    0.00000000,    0.00000000,   -0.00000000,   -0.00000000},    {  -0.00000041,    0.02813573,    0.00000000,    0.00000000,   -0.00000000,    0.02813532,    0.00000000,   -0.00000000,   -0.00000000},    {  -0.00000983,   -0.11724347,   -0.00024444,   -0.00000000,   -0.00000000,   -0.00000000,   -0.11749773,   -0.00000000,   -0.00000000},    {   0.15660350,    0.00000044,    0.00522030,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.16182424,    0.00000000},    {  -0.00589198,    0.00000002,    0.00007991,    0.00000000,    0.00000000,    0.00000000,    0.00000000,   -0.00000000,   -0.00581205}  }};
  float xvec[9] = {   0.00000000,    0.00000000,    0.00000000,   -0.00000000,   -0.00000003,   -0.00000001,   -0.00000001,   -0.00000002,   -0.00000002};
  float yvec[3][9] = { {  -0.02694907,    0.00810465,   -0.00265063,   -0.02681478,    0.02736383,    0.05639220,   -0.00487420,    0.01200702,   -0.04257901},  {   0.02721153,   -0.02968238,    0.01284230,    0.01578207,   -0.05118861,    0.02033170,    0.02054887,    0.01268855,   -0.02853403},  {   0.00812483,   -0.01700864,   -0.00553054,   -0.10054903,    0.09667157,    0.02612885,   -0.04602112,    0.04075407,   -0.00256999}};
  const float alpha = 1.0f;
  const float beta = 1.0f;
  const bool trans = false;

  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec, "%.6f\0"); 
  gemv312(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");

  // Expected results
  const float expected_yvec[3][9] = { {  -0.02694908,    0.00810465,   -0.00265063,   -0.02681478,    0.02736383,    0.05639220,   -0.00487420,    0.01200702,   -0.04257901},  {   0.02721152,   -0.02968238,    0.01284230,    0.01578207,   -0.05118861,    0.02033170,    0.02054887,    0.01268855,   -0.02853403},  {   0.00812483,   -0.01700864,   -0.00553054,   -0.10054903,    0.09667157,    0.02612885,   -0.04602112,    0.04075407,   -0.00256999}};
  printf("\n result = "); printr(yvec);

  assert_isclose(expected_yvec, yvec);
}


__global__
void test_gemv321_0()
{
  printf("========================================\n");
  float amat[3][9][9]   {  {    {   0.00000000,   -0.00613993,    0.00293426,   -0.01064768,   -0.01194712,   -0.02522706,   -0.01281484,   -0.00569101,    0.01735471},    {   0.00613993,    0.00000000,    0.00828702,   -0.00023697,   -0.00267895,   -0.01335101,    0.00145110,    0.00815577,    0.01989041},    {  -0.00293426,   -0.00828702,    0.00000000,   -0.00655813,   -0.00559268,   -0.01971267,   -0.01823724,   -0.00939888,    0.00788181},    {   0.01064768,    0.00023697,    0.00655813,    0.00000000,   -0.01346068,   -0.02076601,    0.00281158,    0.00733213,    0.02790535},    {   0.01194712,    0.00267895,    0.00559268,    0.01346068,    0.00000000,   -0.01366945,    0.00385061,    0.00975105,    0.02535433},    {   0.02522706,    0.01335101,    0.01971267,    0.02076601,    0.01366945,    0.00000000,    0.03463156,    0.03354668,    0.02659815},    {   0.01281484,   -0.00145110,    0.01823724,   -0.00281158,   -0.00385061,   -0.03463156,    0.00000000,    0.00711136,    0.02452278},    {   0.00569101,   -0.00815577,    0.00939888,   -0.00733213,   -0.00975105,   -0.03354668,   -0.00711136,    0.00000000,    0.03591362},    {  -0.01735471,   -0.01989041,   -0.00788181,   -0.02790535,   -0.02535433,   -0.02659815,   -0.02452278,   -0.03591362,    0.00000000}  },  {    {   0.00000000,    0.00246980,   -0.01427662,    0.01689124,    0.01949423,    0.00141086,   -0.00002529,   -0.00601392,    0.01162674},    {  -0.00246980,    0.00000000,   -0.01167450,    0.01516647,    0.01962887,   -0.00484039,   -0.00645765,   -0.00769195,    0.00160342},    {   0.01427662,    0.01167450,    0.00000000,    0.01518306,    0.01261992,    0.01413187,    0.02149673,    0.01892579,    0.02933328},    {  -0.01689124,   -0.01516647,   -0.01518306,    0.00000000,    0.02512172,   -0.03888758,   -0.04145109,   -0.01863385,   -0.01620544},    {  -0.01949423,   -0.01962887,   -0.01261992,   -0.02512172,    0.00000000,   -0.04204903,   -0.02493389,   -0.02341031,   -0.01787740},    {  -0.00141086,    0.00484039,   -0.01413187,    0.03888758,    0.04204903,    0.00000000,   -0.00392193,   -0.00835929,    0.00448878},    {   0.00002529,    0.00645765,   -0.02149673,    0.04145109,    0.02493389,    0.00392193,    0.00000000,   -0.00316193,    0.00781287},    {   0.00601392,    0.00769195,   -0.01892579,    0.01863385,    0.02341031,    0.00835929,    0.00316193,    0.00000000,    0.02750761},    {  -0.01162674,   -0.00160342,   -0.02933328,    0.01620544,    0.01787740,   -0.00448878,   -0.00781287,   -0.02750761,    0.00000000}  },  {    {   0.00000000,    0.00416104,    0.00615903,    0.00848430,    0.00114606,    0.00410148,    0.02221523,   -0.01944833,    0.00099060},    {  -0.00416104,    0.00000000,   -0.00042694,    0.00167671,   -0.00696285,   -0.00613946,    0.01435956,   -0.01790869,   -0.00689786},    {  -0.00615903,    0.00042694,    0.00000000,    0.00100492,   -0.00183527,   -0.00292184,    0.01466076,   -0.02569535,   -0.00842279},    {  -0.00848430,   -0.00167671,   -0.00100492,    0.00000000,   -0.04753361,   -0.01322061,    0.01957511,   -0.01700695,   -0.01161521},    {  -0.00114606,    0.00696285,    0.00183527,    0.04753361,    0.00000000,    0.00403340,    0.01832648,   -0.01073578,   -0.00087041},    {  -0.00410148,    0.00613946,    0.00292184,    0.01322061,   -0.00403340,    0.00000000,    0.04823106,   -0.02631337,   -0.00251586},    {  -0.02221523,   -0.01435956,   -0.01466076,   -0.01957511,   -0.01832648,   -0.04823106,    0.00000000,   -0.02783768,   -0.02169740},    {   0.01944833,    0.01790869,    0.02569535,    0.01700695,    0.01073578,    0.02631337,    0.02783768,    0.00000000,    0.03199939},    {  -0.00099060,    0.00689786,    0.00842279,    0.01161521,    0.00087041,    0.00251586,    0.02169740,   -0.03199939,    0.00000000}  }};
  float xvec[3][9] = { {   0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000},  {   0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000},  {   0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000}};
  float yvec[9] = {   0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000};
  const float alpha = 1.0f;
  const float beta = 1.0f;
  const bool trans = true;

  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv321(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");

  // Expected results
  const float expected_yvec[9] = {   0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000};  printf("\n result = "); printr(yvec);

  assert_isclose(expected_yvec, yvec);
}

__global__
void test_gemv321_1()
{
  printf("========================================\n");
  const float amat[3][9][9]   {  {    {   0.00000000,   -0.00613993,    0.00293426,   -0.01064768,   -0.01194712,   -0.02522706,   -0.01281484,   -0.00569101,    0.01735471},    {   0.00613993,    0.00000000,    0.00828702,   -0.00023697,   -0.00267895,   -0.01335101,    0.00145110,    0.00815577,    0.01989041},    {  -0.00293426,   -0.00828702,    0.00000000,   -0.00655813,   -0.00559268,   -0.01971267,   -0.01823724,   -0.00939888,    0.00788181},    {   0.01064768,    0.00023697,    0.00655813,    0.00000000,   -0.01346068,   -0.02076601,    0.00281158,    0.00733213,    0.02790535},    {   0.01194712,    0.00267895,    0.00559268,    0.01346068,    0.00000000,   -0.01366945,    0.00385061,    0.00975105,    0.02535433},    {   0.02522706,    0.01335101,    0.01971267,    0.02076601,    0.01366945,    0.00000000,    0.03463156,    0.03354668,    0.02659815},    {   0.01281484,   -0.00145110,    0.01823724,   -0.00281158,   -0.00385061,   -0.03463156,    0.00000000,    0.00711136,    0.02452278},    {   0.00569101,   -0.00815577,    0.00939888,   -0.00733213,   -0.00975105,   -0.03354668,   -0.00711136,    0.00000000,    0.03591362},    {  -0.01735471,   -0.01989041,   -0.00788181,   -0.02790535,   -0.02535433,   -0.02659815,   -0.02452278,   -0.03591362,    0.00000000}  },  {    {   0.00000000,    0.00246980,   -0.01427662,    0.01689124,    0.01949423,    0.00141086,   -0.00002529,   -0.00601392,    0.01162674},    {  -0.00246980,    0.00000000,   -0.01167450,    0.01516647,    0.01962887,   -0.00484039,   -0.00645765,   -0.00769195,    0.00160342},    {   0.01427662,    0.01167450,    0.00000000,    0.01518306,    0.01261992,    0.01413187,    0.02149673,    0.01892579,    0.02933328},    {  -0.01689124,   -0.01516647,   -0.01518306,    0.00000000,    0.02512172,   -0.03888758,   -0.04145109,   -0.01863385,   -0.01620544},    {  -0.01949423,   -0.01962887,   -0.01261992,   -0.02512172,    0.00000000,   -0.04204903,   -0.02493389,   -0.02341031,   -0.01787740},    {  -0.00141086,    0.00484039,   -0.01413187,    0.03888758,    0.04204903,    0.00000000,   -0.00392193,   -0.00835929,    0.00448878},    {   0.00002529,    0.00645765,   -0.02149673,    0.04145109,    0.02493389,    0.00392193,    0.00000000,   -0.00316193,    0.00781287},    {   0.00601392,    0.00769195,   -0.01892579,    0.01863385,    0.02341031,    0.00835929,    0.00316193,    0.00000000,    0.02750761},    {  -0.01162674,   -0.00160342,   -0.02933328,    0.01620544,    0.01787740,   -0.00448878,   -0.00781287,   -0.02750761,    0.00000000}  },  {    {   0.00000000,    0.00416104,    0.00615903,    0.00848430,    0.00114606,    0.00410148,    0.02221523,   -0.01944833,    0.00099060},    {  -0.00416104,    0.00000000,   -0.00042694,    0.00167671,   -0.00696285,   -0.00613946,    0.01435956,   -0.01790869,   -0.00689786},    {  -0.00615903,    0.00042694,    0.00000000,    0.00100492,   -0.00183527,   -0.00292184,    0.01466076,   -0.02569535,   -0.00842279},    {  -0.00848430,   -0.00167671,   -0.00100492,    0.00000000,   -0.04753361,   -0.01322061,    0.01957511,   -0.01700695,   -0.01161521},    {  -0.00114606,    0.00696285,    0.00183527,    0.04753361,    0.00000000,    0.00403340,    0.01832648,   -0.01073578,   -0.00087041},    {  -0.00410148,    0.00613946,    0.00292184,    0.01322061,   -0.00403340,    0.00000000,    0.04823106,   -0.02631337,   -0.00251586},    {  -0.02221523,   -0.01435956,   -0.01466076,   -0.01957511,   -0.01832648,   -0.04823106,    0.00000000,   -0.02783768,   -0.02169740},    {   0.01944833,    0.01790869,    0.02569535,    0.01700695,    0.01073578,    0.02631337,    0.02783768,    0.00000000,    0.03199939},    {  -0.00099060,    0.00689786,    0.00842279,    0.01161521,    0.00087041,    0.00251586,    0.02169740,   -0.03199939,    0.00000000}  }};
  const float xvec[3][9] = { {  -0.00380599,    0.02459685,   -0.00912727,   -0.00680253,   -0.00892412,   -0.04660294,    0.01197239,   -0.02268817,    0.05708382},  {  -0.05154629,    0.12513566,    0.00965339,   -0.04463213,    0.00830440,   -0.01421181,   -0.02627234,   -0.02635425,    0.03666638},  {   0.05299119,   -0.01475575,   -0.00083216,   -0.03796718,   -0.02947714,   -0.02482362,    0.04891260,   -0.05361917,    0.00574714}};
  float yvec[9] = {   0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000,    0.00000000};
  const float expected_yvec[9] = {  -0.00389878,   -0.00321394,   -0.00303090,   -0.00613495,   -0.00194635,   -0.00366666,   -0.00482085,   -0.00467159,   -0.00444696};
  float alpha = 1;
  float beta = 1;
  bool trans = true;

  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv321(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");
  assert_isclose(expected_yvec, yvec);
}

__global__
void test_gemv321_2()
{
  printf("========================================\n");
  printf("Test in %s at %s:%d\n", __func__, __FILE__, __LINE__);
  printf("========================================\n");
  const float amat[6][9][9]   {  {    {   0.00000000,    0.00128805,    0.00017349,    0.00150569,    0.00157400,    0.00799613,    0.00209308,    0.00062380,    0.00587140},    {   0.00128805,    0.00000000,    0.00125023,    0.00000126,    0.00011371,    0.00425728,    0.00004915,    0.00097765,    0.00572629},    {   0.00017349,    0.00125023,    0.00000000,    0.00040609,    0.00029630,    0.00325448,    0.00287553,    0.00077744,    0.00053449},    {   0.00150569,    0.00000126,    0.00040609,    0.00000000,    0.00197588,    0.00295138,    0.00005421,    0.00038631,    0.00530240},    {   0.00157400,    0.00011371,    0.00029630,    0.00197588,    0.00000000,    0.00111695,    0.00009593,    0.00063955,    0.00416186},    {   0.00799613,    0.00425728,    0.00325448,    0.00295138,    0.00111695,    0.00000000,    0.00720496,    0.00674563,    0.00478125},    {   0.00209308,    0.00004915,    0.00287553,    0.00005421,    0.00009593,    0.00720496,    0.00000000,    0.00033490,    0.00380560},    {   0.00062380,    0.00097765,    0.00077744,    0.00038631,    0.00063955,    0.00674563,    0.00033490,    0.00000000,    0.00766109},    {   0.00587140,    0.00572629,    0.00053449,    0.00530240,    0.00416186,    0.00478125,    0.00380560,    0.00766109,    0.00000000}  },  {    {   0.00000000,   -0.00103624,   -0.00168824,   -0.00477719,   -0.00513663,   -0.00089439,    0.00000826,    0.00131838,    0.00786706},    {  -0.00103624,    0.00000000,   -0.00352258,   -0.00016133,   -0.00166633,    0.00308694,   -0.00043744,   -0.00184410,    0.00092322},    {  -0.00168824,   -0.00352258,    0.00000000,   -0.00188033,   -0.00133721,   -0.00466623,   -0.00677894,   -0.00313093,    0.00397835},    {  -0.00477719,   -0.00016133,   -0.00188033,    0.00000000,   -0.00737520,    0.01105384,   -0.00159852,   -0.00196355,   -0.00615851},    {  -0.00513663,   -0.00166633,   -0.00133721,   -0.00737520,    0.00000000,    0.00687176,   -0.00124235,   -0.00307088,   -0.00586907},    {  -0.00089439,    0.00308694,   -0.00466623,    0.01105384,    0.00687176,    0.00000000,   -0.00163189,   -0.00336181,    0.00161380},    {   0.00000826,   -0.00043744,   -0.00677894,   -0.00159852,   -0.00124235,   -0.00163189,    0.00000000,   -0.00029781,    0.00242490},    {   0.00131838,   -0.00184410,   -0.00313093,   -0.00196355,   -0.00307088,   -0.00336181,   -0.00029781,    0.00000000,    0.01173584},    {   0.00786706,    0.00092322,    0.00397835,   -0.00615851,   -0.00586907,    0.00161380,    0.00242490,    0.01173584,    0.00000000}  },  {    {   0.00000000,    0.00020842,    0.00410707,    0.00378921,    0.00419075,    0.00002501,    0.00000001,    0.00069659,    0.00263526},    {   0.00020842,    0.00000000,    0.00248125,    0.00516267,    0.00610467,    0.00055958,    0.00097335,    0.00086961,    0.00003721},    {   0.00410707,    0.00248125,    0.00000000,    0.00217663,    0.00150871,    0.00167259,    0.00399526,    0.00315225,    0.00740300},    {   0.00378921,    0.00516267,    0.00217663,    0.00000000,    0.00688218,    0.01035002,    0.01178346,    0.00249508,    0.00178821},    {   0.00419075,    0.00610467,    0.00150871,    0.00688218,    0.00000000,    0.01056923,    0.00402232,    0.00368628,    0.00206915},    {   0.00002501,    0.00055958,    0.00167259,    0.01035002,    0.01056923,    0.00000000,    0.00009240,    0.00041885,    0.00013617},    {   0.00000001,    0.00097335,    0.00399526,    0.01178346,    0.00402232,    0.00009240,    0.00000000,    0.00006621,    0.00038628},    {   0.00069659,    0.00086961,    0.00315225,    0.00249508,    0.00368628,    0.00041885,    0.00006621,    0.00000000,    0.00449446},    {   0.00263526,    0.00003721,    0.00740300,    0.00178821,    0.00206915,    0.00013617,    0.00038628,    0.00449446,    0.00000000}  },  {    {   0.00000000,   -0.00174583,    0.00072832,   -0.00239953,   -0.00030198,   -0.00260006,   -0.00725695,    0.00426349,    0.00067027},    {  -0.00174583,    0.00000000,   -0.00012882,   -0.00001784,    0.00059109,    0.00391542,    0.00097272,   -0.00429349,   -0.00397168},    {   0.00072832,   -0.00012882,    0.00000000,   -0.00012445,    0.00019446,    0.00096477,   -0.00462323,    0.00425083,   -0.00114235},    {  -0.00239953,   -0.00001784,   -0.00012445,    0.00000000,    0.01395485,    0.00375797,    0.00075489,   -0.00179211,   -0.00441410},    {  -0.00030198,    0.00059109,    0.00019446,    0.01395485,    0.00000000,   -0.00065915,    0.00091313,   -0.00140828,   -0.00028575},    {  -0.00260006,    0.00391542,    0.00096477,    0.00375797,   -0.00065915,    0.00000000,    0.02006857,   -0.01058229,   -0.00090450},    {  -0.00725695,    0.00097272,   -0.00462323,    0.00075489,    0.00091313,    0.02006857,    0.00000000,   -0.00262196,   -0.00673427},    {   0.00426349,   -0.00429349,    0.00425083,   -0.00179211,   -0.00140828,   -0.01058229,   -0.00262196,    0.00000000,    0.01365221},    {   0.00067027,   -0.00397168,   -0.00114235,   -0.00441410,   -0.00028575,   -0.00090450,   -0.00673427,    0.01365221,    0.00000000}  },  {    {   0.00000000,    0.00070226,   -0.00354363,    0.00380657,    0.00049275,    0.00014541,   -0.00001432,    0.00450540,    0.00044905},    {   0.00070226,    0.00000000,    0.00018148,    0.00114150,   -0.00433096,    0.00141953,   -0.00432879,    0.00404932,   -0.00032017},    {  -0.00354363,    0.00018148,    0.00000000,    0.00028813,   -0.00043881,   -0.00069164,    0.00544953,   -0.00855956,   -0.00425141},    {   0.00380657,    0.00114150,    0.00028813,    0.00000000,   -0.02604399,    0.00703739,   -0.01112938,    0.00455447,    0.00256339},    {   0.00049275,   -0.00433096,   -0.00043881,   -0.02604399,    0.00000000,   -0.00202763,   -0.00591283,    0.00338100,    0.00020148},    {   0.00014541,    0.00141953,   -0.00069164,    0.00703739,   -0.00202763,    0.00000000,   -0.00227271,    0.00263694,   -0.00015265},    {  -0.00001432,   -0.00432879,    0.00544953,   -0.01112938,   -0.00591283,   -0.00227271,    0.00000000,    0.00116581,   -0.00214551},    {   0.00450540,    0.00404932,   -0.00855956,    0.00455447,    0.00338100,    0.00263694,    0.00116581,    0.00000000,    0.01045675},    {   0.00044905,   -0.00032017,   -0.00425141,    0.00256339,    0.00020148,   -0.00015265,   -0.00214551,    0.01045675,    0.00000000}  },  {    {   0.00000000,    0.00059158,    0.00076437,    0.00095600,    0.00001448,    0.00021136,    0.00629016,    0.00728498,    0.00001913},    {   0.00059158,    0.00000000,    0.00000332,    0.00006310,    0.00076815,    0.00090025,    0.00481285,    0.00471389,    0.00068868},    {   0.00076437,    0.00000332,    0.00000000,    0.00000954,    0.00003191,    0.00007150,    0.00185829,    0.00581061,    0.00061038},    {   0.00095600,    0.00006310,    0.00000954,    0.00000000,    0.02463933,    0.00119625,    0.00262790,    0.00207841,    0.00091865},    {   0.00001448,    0.00076815,    0.00003191,    0.02463933,    0.00000000,    0.00009725,    0.00217297,    0.00077525,    0.00000490},    {   0.00021136,    0.00090025,    0.00007150,    0.00119625,    0.00009725,    0.00000000,    0.01397466,    0.00415027,    0.00004278},    {   0.00629016,    0.00481285,    0.00185829,    0.00262790,    0.00217297,    0.01397466,    0.00000000,    0.00513188,    0.00297919},    {   0.00728498,    0.00471389,    0.00581061,    0.00207841,    0.00077525,    0.00415027,    0.00513188,    0.00000000,    0.00608213},    {   0.00001913,    0.00068868,    0.00061038,    0.00091865,    0.00000490,    0.00004278,    0.00297919,    0.00608213,    0.00000000}  }};
  const float xvec[6][9] = { {  -0.15602590,   -0.11365415,   -0.10606729,    0.01802905,   -0.06356344,    0.00587979,   -0.02184976,   -0.00109227,   -0.00557563},  {  -0.28870201,   -0.10086348,   -0.12036681,   -0.00041138,   -0.01387689,   -0.00010992,   -0.02090297,   -0.02324973,   -0.00535063},  {   0.25155181,    0.33252412,    0.17609153,    0.07442608,    0.00336466,    0.01180064,    0.00531251,   -0.02294730,    0.01548974},  {  -0.09389656,   -0.13641700,    0.03407466,   -0.02610743,    0.03529024,    0.00392689,   -0.02080653,   -0.00970238,   -0.00626807},  {  -0.22456489,    0.11397765,   -0.10977287,    0.03457413,   -0.05879739,    0.01554411,    0.00283554,   -0.02464336,   -0.00122612},  {  -0.09552591,   -0.21886997,   -0.07002423,   -0.09245513,    0.06019878,   -0.01768043,    0.01653725,    0.02403957,   -0.00991410}};
  float       yvec[9] = {  -0.00744319,   -0.00626876,   -0.00458522,   -0.01422990,   -0.00543230,   -0.00531416,   -0.00831640,   -0.00864135,   -0.00913504};
  const float expected_yvec[9] = {  -0.00541390,   -0.00451568,   -0.00046042,   -0.00664288,   -0.00420893,   -0.00598994,   -0.00883147,   -0.00920890,   -0.01145051};
  float alpha = 1;
  float beta = 1;
  bool trans = true;
  
  printf("\n amat = "); printr(amat);
  printf("\n xvec = "); printr(xvec); 
  gemv321(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");
  assert_isclose(expected_yvec, yvec);
}


__global__
void test_gemv422_0()
{
  printf("========================================\n");
  printf("Test in %s at %s:%d\n", __func__, __FILE__, __LINE__);
  printf("========================================\n");
  float amat[2][3][2][3] = { {  {   {   0.00000000,    0.00000000,    0.00000000   },    {   0.00000000,    0.00000000,    0.00000000   }  },   {   {   0.00000000,    0.00000000,    0.00000000   },    {   0.00000000,    0.00000000,    0.00000000   }  },   {   {   0.00000000,    0.00000000,    0.00000000   },    {   0.00000000,    0.00000000,    0.00000000   }  } },  {  {   {   0.00000000,    0.00000000,    0.00000000   },    {   0.00000000,    0.00000000,    0.00000000   }  },   {   {  -0.00050732,    0.00000000,    0.00000000   },    {   0.00000000,    0.00000000,    0.00000000   }  },   {   {   0.00000000,    0.00000000,    0.00000000   },    {   0.00000000,    0.00000000,    0.00000000   }  } }};
  float xvec[2][3] = { {   0.00000000,    0.00000000,    0.00000000},  {   0.00000000,    0.00000000,    0.00000000}};
  float yvec[2][3] = { {  -0.00000000,    0.00000000,   -4.86079290},  {  -0.00000000,    0.00000000,   -4.49576529}};
  float expected_yvec[2][3] = { {  -0.00063932,    0.00000000,   -4.86079290},  {  -0.00064740,    0.00000000,   -4.49576529}};
  float alpha = 1;
  float beta = 0;
  bool trans = false;
  
  printf("\n amat = "); printr(amat, "%.6f");
  printf("\n xvec = "); printr(xvec, "%.6f"); 
  gemv422(amat, xvec, yvec, alpha, beta, trans);
  printf("========== result =========");
  printf("\n yvec = "); printr(yvec, "%.6f"); 
  assert_isclose(expected_yvec, yvec);
}

void test_blas()
{
  {
  cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  test_gemv_0<<<1, 1>>>();
  gpuErrchk(cudaPeekAtLastError());
  gpuErrchk(cudaDeviceSynchronize());


  cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  test_gemv_1<<<1, 1>>>();
  gpuErrchk(cudaPeekAtLastError());
  gpuErrchk(cudaDeviceSynchronize());
  

  cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  test_gemv312_0<<<1, 1>>>();
  gpuErrchk(cudaPeekAtLastError());
  gpuErrchk(cudaDeviceSynchronize());


  cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  test_gemv312_1<<<1, 1>>>();
  gpuErrchk(cudaPeekAtLastError());
  gpuErrchk(cudaDeviceSynchronize());

  cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  test_gemv312_2<<<1, 1>>>();
  gpuErrchk(cudaPeekAtLastError());
  gpuErrchk(cudaDeviceSynchronize());
  }
  {
  // cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  // cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  // test_gemv321_0<<<1, 1>>>();
  // gpuErrchk(cudaPeekAtLastError());
  // gpuErrchk(cudaDeviceSynchronize());

  
  // cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  // cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  // test_gemv321_1<<<1, 1>>>();
  // gpuErrchk(cudaPeekAtLastError());
  // gpuErrchk(cudaDeviceSynchronize());

  // cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  // cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  // test_gemv321_2<<<1, 1>>>();
  // gpuErrchk(cudaPeekAtLastError());
  // gpuErrchk(cudaDeviceSynchronize());
  }
  {
    cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
    cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
    test_gemv422_0<<<1, 1>>>();
    gpuErrchk(cudaPeekAtLastError());
    gpuErrchk(cudaDeviceSynchronize());
  }
  
  // cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  // cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  // // test_gemv_1<<<1, 1>>>();

  // test_gemv312<<<1, 1>>>();
  // gpuErrchk(cudaPeekAtLastError());
  // gpuErrchk(cudaDeviceSynchronize());

  // cudaDeviceSetLimit(cudaLimitStackSize, 1024 * sizeof(float));
  // cudaDeviceSetLimit(cudaLimitMallocHeapSize, 128 * 1024 * 1024);
  // // test_gemv_1<<<1, 1>>>();
  // test_gemv422<<<1, 1>>>();
  // gpuErrchk(cudaPeekAtLastError());
  // gpuErrchk(cudaDeviceSynchronize());
}